graph hpc_cluster {
    // Dynamic cluster configuration
    let cluster_size = 16;
    let load_threshold = 0.8;
    let network_tier = "infiniband";

    // Management layer
    node scheduler :control [type="slurm", load=0.0];
    node storage :control [type="lustre", capacity=1000.0];

    // GPU compute nodes (first 8)
    for i in 0..8 {
        let load = i * 0.05;
        node "node{i}" :compute [
            tier="gpu",
            cores=128,
            load=load,
            available=1,
            is_gpu=1
        ];
    }

    // CPU compute nodes (remaining 8)
    for i in 8..cluster_size {
        let load = i * 0.05;
        node "node{i}" :compute [
            tier="cpu",
            cores=64,
            load=load,
            available=1,
            is_gpu=0
        ];
    }

    // Connect compute nodes to management
    edge: scheduler -> "node0" [type="control", bandwidth="10Gbps"];
    edge: storage -> "node0" [type="storage", bandwidth="100Gbps"];
    edge: scheduler -> "node8" [type="control", bandwidth="10Gbps"];
    edge: storage -> "node8" [type="storage", bandwidth="100Gbps"];

    // Adaptive network topology generator
    generate complete {
        topology: "fat_tree";
        bandwidth: "200Gbps";
        redundancy: 2;
    }

    // Load balancing rule
    rule load_balance {
        lhs {
            node overloaded :compute [load>=0.8];
            node available :compute [available=1];
            node scheduler :control;
        }
        rhs {
            edge: scheduler -> available [operation="migrate_job"];
            edge: overloaded -> available [operation="transfer"];
            node overloaded :compute [load=0.5];
            node available :compute [load=0.6];
        }
    }

    // Network optimization rule
    rule optimize_network {
        lhs {
            node A :compute [is_gpu=1];
            node B :compute [is_gpu=1];
        }
        rhs {
            edge: A -- B [bandwidth="400Gbps", priority="high"];
        }
    }

    // Resource allocation rule
    rule allocate_resources {
        lhs {
            node requester :compute [available=1];
            node storage :control;
        }
        rhs {
            edge: requester -> storage [
                bandwidth=200.0,
                allocation=true
            ];
        }
    }

    // Conditional high-performance connections
    if cluster_size > 10 {
        edge: "node0" -- "node8" [type="inter_tier", bandwidth="800Gbps"];
    }

    apply load_balance 3 times;
    apply optimize_network 2 times;
    apply allocate_resources 1 times;
}
